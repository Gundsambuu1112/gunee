package test

import (
	"database/sql"
	"fmt"

	_ "github.com/go-sql-driver/mysql"
)

func main() {

	// Өгөгдлийн сангийн холболтыг нээнэ үү.
	db, err := sql.Open("mysql", "root:8853d4E!@tcp(localhost:3306)/blockchain")
	if err != nil {
		fmt.Println("Өгөгдлийн санд холбогдож чадсангүй:", err)
		return
	}
	defer db.Close()

	// Холболтыг шалгана уу.
	err = db.Ping()
	if err != nil {
		fmt.Println("Өгөгдлийн санг ping хийж чадсангүй:", err)
		return
	}

	fmt.Println("MySQL мэдээллийн санд холбогдсон")

	//өгөгдлийн сангийн "блок" хүснэгтээс бүх мөрийг татахын тулд SQL мэдэгдлийг бэлтгэдэг.
	stmt, err := db.Prepare("SELECT * FROM blocks")
	if err != nil {
		fmt.Println("Мэдэгдэл бэлтгэхэд алдаа гарлаа:", err)
		return
	}
	defer stmt.Close()

	//өгөгдлийн сангаас үр дүнгийн багцыг авахын тулд бэлтгэсэн SQL мэдэгдлийг stmt.Query() гүйцэтгэнэ.
	rows, err := stmt.Query()
	if err != nil {
		fmt.Println("Асуултыг гүйцэтгэхэд алдаа гарлаа:", err)
		return
	}
	defer rows.Close()

	//дүнгийн багцын баганын төрлийг олж авна.
	columns, err := rows.ColumnTypes()
	if err != nil {
		fmt.Println("Баганын төрлийг авахад алдаа гарлаа:", err)
		return
	}

	//үр дүнгийн багц дахь багана бүрийн төрөл бүрийн шинж чанаруудад хандаж, тэдгээрийг төрөл, шинж чанарт нь үндэслэн өгөгдлийг зохих ёсоор удирдах боломж олгоно.
	for _, col := range columns {
		fmt.Println("Баганын нэр:", col.Name())
		fmt.Println("Баганын мэдээллийн сангийн төрлийн нэр:", col.DatabaseTypeName())

		nullable, _ := col.Nullable() // col.Nullable()-ийн үр дүнг тэг хувьсагчид онооно.
		fmt.Println("Багана хүчингүй болно:", nullable)

		precision, scale, ok := col.DecimalSize()
		if ok {
			fmt.Println("Аравтын бутархай баганын хэмжээ:", precision, scale)
		}

		length, ok := col.Length()
		if ok {
			fmt.Println("Баганын урт:", length)
		}

		fmt.Println("Баганын скан төрөл:", col.ScanType())
		fmt.Println("-----")
		blockchain, err := LoadBlockchainFromDatabase()
		if err != nil {
			fmt.Println("Failed to load blockchain:", err)
			return
		}

		// Блокчейн дэх блок бүрийн өгөгдлийг хэвлэ.
		for _, block := range blockchain.Blocks {
			fmt.Printf("Block ID: %d\n", block.ID)
			fmt.Printf("Data: %s\n", block.Data)
			fmt.Printf("Previous Hash: %s\n", block.PreviousHash)
			fmt.Printf("Timestamp: %d\n", block.Timestamp)
			fmt.Println("----------")
		}
	}

	//гүйлгээг эхлүүлж, гүйлгээ эхлэхгүй бол алдааг зохицуулдаг. Энэ нь мөн гүйлгээ хийгдээгүй тохиолдолд буцаах дуудлагыг хойшлуулдаг.
	tx, err := db.Begin()
	if err != nil {
		fmt.Println("Гүйлгээг эхлүүлж чадсангүй:", err)
		return
	}
	defer tx.Rollback()
}

// LoadBlockchainFromDatabase нь мэдээллийн сангаас блокчейн өгөгдлийг ачаалдаг.
func LoadBlockchainFromDatabase() (*Blockchain, error) {
	// Өгөгдлийн сангийн холболтыг бий болгох.
	db, err := sql.Open("mysql", "root:8853d4E!@tcp(localhost:3306)/blockchain")
	if err != nil {
		return nil, err
	}
	defer db.Close()

	// Өгөгдлийн сангаас блокчейн өгөгдөл авах хүсэлт.
	query := "SELECT block_id, previous_hash, data, timestamp FROM blocks ORDER BY block_id ASC"
	rows, err := db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	blockchain := &Blockchain{db: db}

	// Блокийн тохиолдлуудыг үүсгэхийн тулд мөрүүдийг давтаж, блокчэйнд нэмнэ үү.
	for rows.Next() {
		var blockID, timestamp int64
		var previousHash, data string

		err := rows.Scan(&blockID, &previousHash, &data, &timestamp)
		if err != nil {
			return nil, err
		}

		// Шинэ Блокийн жишээ үүсгээд блокчэйнд нэмнэ үү.
		block := &Block{
			ID:           blockID,
			PreviousHash: previousHash,
			Data:         data,
			Timestamp:    timestamp,
		}
		blockchain.Blocks = append(blockchain.Blocks, block)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	return blockchain, nil
}

	// Өгөгдлийн сангийн холболтыг нээнэ үү.
	db, err := sql.Open("mysql", "root:8853d4E!@tcp(localhost:3306)/blockchain")
	if err != nil {
		fmt.Println("Өгөгдлийн санд холбогдож чадсангүй:", err)
		return
	}
	defer db.Close()

	fmt.Println("MySQL мэдээллийн санд холбогдсон")

	blockchain, err := LoadBlockchainFromDatabase()
	if err != nil {
		fmt.Println("Блокчейн ачаалж чадсангүй:", err)
		return
	}

	// Блокчейн дэх блок бүрийн өгөгдлийг хэвлэ.
	for _, block := range blockchain.Blocks {
		fmt.Printf("Block ID: %d\n", block.ID)
		fmt.Printf("Data: %s\n", block.Data)
		fmt.Printf("Previous Hash: %s\n", block.PreviousHash)
		fmt.Printf("Timestamp: %d\n", block.Timestamp)
		fmt.Println("----------")
	}
